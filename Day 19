class Solution {
public:
    vector<vector<string>> findDuplicate(vector<string>& paths) {
        unordered_map<string,vector<string>> hsh;
        for(auto path : paths){
            stringstream ss(path);
            string d;
            string f;
            getline(ss,d,' ');
            while(getline(ss,f,' ')){
                string content = f.substr(f.find('(') + 1, f.find(')') - f.find('(') - 1);
                string name = d + '/' + f.substr(0, f.find('('));
                hsh[content].push_back(name);
            }
            
        }
        vector<vector<string>> ans;
        for(auto it=hsh.begin();it!=hsh.end();it++){
            if(it->second.size()>1){
                ans.push_back(it->second);
            }
        }
        return ans;
        
    }
};
