class Solution {
public:
    
    inline bool ispalin(const string &s, int i, int j) {
        while(i < j && s[i] == s[j]) {
            i++;
            j--;
        }
        return i >= j;
    }
    vector<vector<int>> palindromePairs(vector<string>& words) {
        map<int,unordered_map<string,int>>mp;
        for(int i=0;i<words.size();i++){
            mp[words[i].size()][string(words[i].rbegin(), words[i].rend())] = i;
        }
        vector<vector<int>>ans;
        for(int i=0; i < words.size(); i++) {
            auto w = words[i];
                for(auto & [k, m] : mp) {
                if (k > w.size()) break;
                if (k == w.size()) {
                    if (m.count(w) && m[w] != i) {
                        ans.push_back({i, m[w]});
                    }
                    break;
                }
                
                if (ispalin(w, k, w.size() - 1)) {
                    auto tgt = w.substr(0, k);
                    if (m.count(tgt)) {
                        ans.push_back({i, m[tgt]});
                    }
                }

                if (ispalin(w, 0, w.size() - k - 1)) {
                    auto tgt = w.substr(w.size() - k);
                    if (m.count(tgt)) {
                        ans.push_back({m[tgt], i});
                    }
                }
            }
        }
        return ans;
        
        
    }
};
